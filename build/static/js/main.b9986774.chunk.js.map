{"version":3,"sources":["Components/CreateArea.js","Components/Footer.js","Components/Header.js","Components/Note.js","Components/Keep.js","Components/firebase.config.js","Components/Login.js","Components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["App","useContext","UserContext","loggedInUser","number","setNumber","useState","isExpanded","setExpanded","useForm","register","handleSubmit","errors","watch","className","onSubmit","data","email","role","fetch","method","headers","body","JSON","stringify","then","res","json","name","defaultValue","ref","required","onClick","rows","exampleRequired","Zoom","type","in","Fab","Footer","Header","setLoggedInUser","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","aria-haspopup","aria-labelledby","firebase","signOut","catch","error","Note","note","handleDelete","_id","result","title","takeANote","Keep","notes","setNotes","useEffect","authorization","sessionStorage","getItem","map","key","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","history","useHistory","from","useLocation","state","pathname","length","storeAuthToken","currentUser","getIdToken","idToken","setItem","replace","provider","GoogleAuthProvider","signInWithPopup","user","displayName","photoURL","errorMessage","message","console","log","src","alt","PrivateRoute","children","rest","render","location","createContext","Provider","value","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9986774.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport { UserContext } from \"../App\";\n\nexport default function App() {\n    const [loggedInUser, setLoggedInUser, number, setNumber] = useContext(UserContext);\n    const [isExpanded, setExpanded] = useState(false);\n\n    const handleSum = () => {\n        setNumber(number + 1)\n    }\n\n    const { register, handleSubmit, watch, errors } = useForm();\n    const onSubmit = (data) => {\n        handleSum()\n        data.email = loggedInUser.email\n        data.role = \"user\"\n        fetch('http://localhost:5000/addNotes', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(data => {\n                // console.log(data)\n            })\n\n    };\n\n    const expand = () => {\n        setExpanded(true);\n    }\n\n    return (\n\n        <div>\n            <form className=\"create-note\" onSubmit={handleSubmit(onSubmit)}>\n                {isExpanded && (\n                    <input\n                        name=\"title\"\n                        defaultValue=\"Title\"\n                        ref={register({ required: true })}\n                    />\n                )}\n\n                <input\n                    name=\"takeANote\"\n                    onClick={expand}\n                    defaultValue=\"Take A Note ...\"\n                    rows={isExpanded ? 3 : 1}\n                    ref={register({ required: true })}\n                />\n                {errors.exampleRequired && <span>This field is required</span>}\n\n                <Zoom type=\"submit\" in={isExpanded}>\n                    <Fab>\n                        <AddIcon />\n                    </Fab>\n                </Zoom>\n            </form>\n        </div>\n    );\n}","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {year}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useContext } from \"react\";\nimport HighlightIcon from \"@material-ui/icons/Highlight\";\nimport { UserContext } from \"../App\";\nimport { Link } from \"react-router-dom\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nfunction Header() {\n  const [loggedInUser, setLoggedInUser] = useContext(UserContext)\n\n  const handleGoogleSignOut = () => {\n    firebase.auth().signOut()\n\n      .then(function () {\n        setLoggedInUser({\n          name: ' ',\n          email: '',\n        })\n      }).catch(function (error) {\n      });\n  }\n\n\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-light header\">\n      <Link className=\"navbar-brand\" to=\"/\"><h1><HighlightIcon /> Keeper</h1></Link>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav ml-auto\">\n\n        <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          {loggedInUser.name}\n        </a>\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          <button className=\"dropdown-item btn btn-warning\" onClick={handleGoogleSignOut}>Log Out</button>\n        </div>\n      </li>\n\n        </ul>\n      </div>\n    </nav>\n  );\n\n}\n\nexport default Header;\n","import React, { useContext } from 'react';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { UserContext } from '../App';\n\nconst Note = ({ note }) => {\n  const [loggedInUser, setLoggedInUser, number, setNumber] = useContext(UserContext);\n\n  const handleSum = () => {\n    setNumber(number + 1)\n  }\n\n  const handleDelete = (id) => {\n    handleSum();\n    fetch(`http://localhost:5000/delete/${note._id}`, {\n      method: 'DELETE',\n    })\n      .then(res => res.json)\n      .then(result => {\n        // console.log('deleted successfully');\n      })\n  }\n\n  return (\n    <div className=\"note col-md-4 col-lg-3\">\n      <h1>{note.title}</h1>\n      <p>{note.takeANote}</p>\n      <button onClick={() => handleDelete(`${note._id}`)}>\n        <DeleteIcon />\n      </button>\n    </div>\n  );\n};\n\nexport default Note;","import React, { useContext, useEffect, useState } from 'react';\nimport { UserContext } from '../App';\nimport CreateArea from './CreateArea'\nimport Footer from './Footer';\nimport Header from './Header';\nimport Note from './Note';\n\nconst Keep = () => {\n    const [loggedInUser, setLoggedInUser, number, setNumber] = useContext(UserContext);\n\n    const [notes, setNotes] = useState([])\n    useEffect(() => {\n        fetch('http://localhost:5000/myNotes?email=' + loggedInUser.email, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                authorization: `Bearer ${sessionStorage.getItem('token')}`\n            }\n        })\n            .then(res => res.json())\n            .then(data => setNotes(data))\n    }, [number])\n    return (\n        <div>\n            <Header></Header>\n            <CreateArea></CreateArea>\n            <div className=\"row d-flex align-items-center justify-content-center\">\n                {notes.map(note => <Note key={note._id} note={note}></Note>)}\n            </div>\n            {/* <Footer></Footer> */}\n        </div>\n    );\n};\n\nexport default Keep;","const firebaseConfig = {\n    apiKey: \"AIzaSyCzOz0ize4ZcFrsXYCO_dAxq0cfxKX8ank\",\n    authDomain: \"keeper-arnob.firebaseapp.com\",\n    databaseURL: \"https://keeper-arnob.firebaseio.com\",\n    projectId: \"keeper-arnob\",\n    storageBucket: \"keeper-arnob.appspot.com\",\n    messagingSenderId: \"193962895540\",\n    appId: \"1:193962895540:web:43de8e76e2a8876d8b4fe1\"\n  };\n\nexport default firebaseConfig;","import React, { useContext } from 'react';\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport firebaseConfig from './firebase.config';\nimport { UserContext } from '../App';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst Login = () => {\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext);\n\n    const history = useHistory();\n    const location = useLocation();\n    const { from } = location.state || { from: { pathname: \"/\" } };\n\n    if (firebase.apps.length === 0) {\n        firebase.initializeApp(firebaseConfig);\n    }\n\n    const handleGoogleSignIn = () => {\n        var provider = new firebase.auth.GoogleAuthProvider();\n        firebase.auth().signInWithPopup(provider).then(function (result) {\n            const { displayName, email, photoURL } = result.user;\n            const signedInUser = { name: displayName, email, photoURL };\n            setLoggedInUser(signedInUser);\n            storeAuthToken();\n        }).catch(function (error) {\n            const errorMessage = error.message;\n            console.log(errorMessage);\n        });\n    }\n\n    const storeAuthToken = () => {\n        firebase.auth().currentUser.getIdToken(/* forceRefresh */ true)\n            .then(function (idToken) {\n                sessionStorage.setItem('token', idToken);\n                history.replace(from);\n            }).catch(function (error) {\n                // Handle error\n            });\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"signInButton d-flex row flex-column  align-items-center justify-content-center\">\n                <h2 className=\"text-center\">Welcome To Google Keep</h2>\n                <button className=\"btn btn-primary mt-5\" onClick={handleGoogleSignIn}><img src=\"../images/google.png\" alt=\"\" /> Google Sign in</button>\n            </div>\n\n        </div>\n\n    );\n};\n\nexport default Login;","\nimport React, { useContext } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { UserContext } from '../App.js'\n\nconst PrivateRoute = ({ children, ...rest }) => {\n    const [loggedInUser, setLoggedInUser] = useContext(UserContext);\n    return (\n        <Route\n            {...rest}\n            render={({ location }) =>\n                loggedInUser.email ? (\n                    children\n                ) : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: { from: location }\n                            }}\n                        />\n                    )\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;","import React, { createContext, useState } from 'react';\nimport './App.css';\nimport Keep from './Components/Keep';\nimport Login from './Components/Login';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport PrivateRoute from './Components/PrivateRoute';\n\nexport const UserContext = createContext();\n\nfunction App() {\n  const [loggedInUser, setLoggedInUser] = useState({});\n  const [number, setNumber] = useState(0)\n  return (\n    <UserContext.Provider value={[loggedInUser, setLoggedInUser, number, setNumber ]}>\n      <Router>\n        <Switch>\n          <Route path=\"/login\">\n            <Login></Login>\n          </Route>\n          <PrivateRoute path=\"/\">\n            <Keep></Keep>\n          </PrivateRoute>\n        </Switch>\n      </Router>\n      </UserContext.Provider>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}